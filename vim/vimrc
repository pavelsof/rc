"
" preamble
"

filetype plugin indent on  " enable file type detection
syntax enable


"
" settings
"

set autoindent  " follow indentation of last line
set autoread  " auto-detect file changes
set backspace=2
set clipboard+=unnamed  " use the normal clipboard
set completeopt=menuone,preview,popup  " autocompletion popup menu
set equalalways
set encoding=utf-8
set fileencoding=utf-8
set fileformat=unix
set foldcolumn=4  " width of the column used to indicate folds
set foldlevelstart=42  " no closed folds at start
set foldmethod=indent  " automatic folding of indented blocks
set foldnestmax=3  " maximum number of nested folds
set gdefault  " substitution is done on all matches in a line
set guicursor+=a:blinkon0  " Diaspar's central computer does not blink
set guifont=monospace\ 11
set guioptions+=a  " visual selection goes to clipboard
set guioptions-=e  " better looking window tabs
set guioptions-=L  " remove left-hand scroll
set guioptions-=m  " remove menu bar
set guioptions-=r  " remove right-hand scroll
set guioptions-=T  " remove toolbar
set helplang=  " inglés por favor
set hlsearch  " highlight search matches
set ignorecase  " search is case-insensitive
set incsearch  " highlight search matches while typing
set linebreak  " break at words instead of chars when wrap is on
set nobackup  " do not hold backups after the file is written to
set nobomb  " without BOM
set nocindent  " cindent does not behave well with js
set noerrorbells visualbell t_vb=
set number
set ruler
set shell=/bin/bash  " prevent fish from taking over
set shiftround  " < and > go for multiples of shiftwidth
set shiftwidth=4  " width of indentation
set showtabline=2  " always show tab page labels
set smartcase  " if capital letter, search is case-sensitive
set smarttab
set splitbelow  " new :split is below current
set splitright  " new :vsplit is to the right of the current
set tabstop=4
set termguicolors
set wildmenu  " enhanced auto-completion for the command line
set wrap  " do not overflow horizontally
set writebackup  " create backup file while editing


" the env var would be set by darken
if $THEME ==? 'dark'
	set background=dark
else
	set background=light
end


"
" global variables
"

" fix termguicolors in tmux
if &term =~# '^screen' || &term =~# '^tmux'
	let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
	let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
endif

" enable syntax highlighting for markdown code blocks
let g:markdown_fenced_languages = ['js=javascript', 'python', 'sh']

" netrw directory listing
let g:netrw_liststyle = 3


"
" key mappings
"

" browser-like new tab
nnoremap  <c-t> 		:tabnew<cr>

" might be better than <c-tab> and <c-s-tab>
nnoremap  <leader>1		:tabnext 1<cr>
nnoremap  <leader>2		:tabnext 2<cr>
nnoremap  <leader>3		:tabnext 3<cr>
nnoremap  <leader>4		:tabnext 4<cr>
nnoremap  <leader>5		:tabnext 5<cr>
nnoremap  <leader>6		:tabnext 6<cr>
nnoremap  <leader>7		:tabnext 7<cr>
nnoremap  <leader>8		:tabnext 8<cr>
nnoremap  <leader>9		:tabnext 9<cr>

" no habit should die!
inoremap  <c-s>			<esc>:w<cr>
nnoremap  <c-s>			:w<cr>

" easier :noh
nnoremap  <leader><space>	:noh<cr>

" spells
nnoremap  <leader>lb  :setlocal spell! spelllang=bg<cr>
nnoremap  <leader>ld  :setlocal spell! spelllang=de<cr>
nnoremap  <leader>le  :setlocal spell! spelllang=en_gb<cr>

" IPA
inoremap  <c-p>			<nop>

inoremap  <c-p>td		t̪
inoremap  <c-p>dd		d̪
inoremap  <c-p>tr		ʈ
inoremap  <c-p>dr		ɖ
inoremap  <c-p>j-		ɟ
inoremap  <c-p>gg		ɡ
inoremap  <c-p>gl		ʔ

inoremap  <c-p>nd		n̪
inoremap  <c-p>nr		ɳ
inoremap  <c-p>nj		ɲ
inoremap  <c-p>ng		ŋ

inoremap  <c-p>rt		ɾ
inoremap  <c-p>rr		ɽ

inoremap  <c-p>fi		ɸ
inoremap  <c-p>be		β
inoremap  <c-p>th		θ
inoremap  <c-p>dh		ð
inoremap  <c-p>sd		s̪
inoremap  <c-p>zd		z̪
inoremap  <c-p>sh		ʃ
inoremap  <c-p>zh		ʒ
inoremap  <c-p>sr		ʂ
inoremap  <c-p>zr		ʐ
inoremap  <c-p>ga		ɣ
inoremap  <c-p>hv		ɦ

inoremap  <c-p>lz		ɮ

inoremap  <c-p>vl		ʋ

inoremap  <c-p>lb		ɬ
inoremap  <c-p>lr		ɭ
inoremap  <c-p>ly		ʎ

inoremap  <c-p>-)		 ͡
inoremap  <c-p>-(		 ͜

inoremap  <c-p>I		ɪ
inoremap  <c-p>i-		ɨ
inoremap  <c-p>up		ʊ
inoremap  <c-p>o-		ɵ
inoremap  <c-p>yy		ə
inoremap  <c-p>ep		ɛ
inoremap  <c-p>uv		ʌ
inoremap  <c-p>oc		ɔ
inoremap  <c-p>ae		æ
inoremap  <c-p>ao		ɑ
inoremap  <c-p>oa		ɒ

inoremap  <c-p>-h		ʰ
inoremap  <c-p>-d		 ̯
inoremap  <c-p>-w		ʷ
inoremap  <c-p>-j		ʲ
inoremap  <c-p>-~		 ̃
inoremap  <c-p>-n		ⁿ

inoremap  <c-p>-'		ˈ
inoremap  <c-p>-:		ː
inoremap  <c-p>-.		ˑ
inoremap  <c-p>--		 ̆
inoremap  <c-p>-_		 ̄

" make it easier to make it easier to edit
nnoremap  <leader>ve    :vsplit $MYVIMRC<cr>
nnoremap  <leader>vs    :source $MYVIMRC<cr>


"
" event hooks
"

augroup filetype_css
	autocmd!
	autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
augroup END

augroup filetype_heex
	autocmd!
	autocmd! BufRead,BufNewFile *.heex set filetype=eelixir
augroup END

augroup filetype_javascript
	autocmd!
	autocmd FileType javascript setlocal foldmethod=marker
	autocmd FileType javascript setlocal foldmarker={,}
	autocmd FileType javascript setlocal foldtext=GetCleanFoldText()
augroup END

augroup filetype_tsv
	autocmd!
	autocmd BufRead,BufNewFile *.tsv setlocal tabstop=16
augroup END

augroup filetype_yaml
	autocmd!
	autocmd FileType yaml setlocal shiftwidth=2
augroup END

" start with a maximised window
if has('gui_running')
	autocmd GUIEnter * silent !wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
endif


"
" functions
"

" define the folded line content
function! GetCleanFoldText()
	let line = getline(v:foldstart)
	let line = substitute(line, "\t", "    ", 'g')
	return line
endfunction

" delete the current file's view
" http://www.vim.org/scripts/script.php?script_id=5109
function! DeleteView()
	let path = fnamemodify(bufname('%'),':p')
	let path = substitute(path, '=', '==', 'g')
	if empty($HOME)
	else
		let path = substitute(path, '^'.$HOME, '\~', '')
	endif
	let path = substitute(path, '/', '=+', 'g') . '='
	let path = &viewdir.'/'.path
	call delete(path)
	echom "Deleted: ".path
endfunction


"
" plugins
"

call plug#begin('~/.vim/plugged')

" theme and ui
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'

" should be built-in
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'jasonccox/vim-wayland-clipboard'
Plug 'ap/vim-css-color'
Plug 'gregsexton/MatchTag'

" jumping and searching
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

" drawers and extras
Plug 'sjl/gundo.vim'
Plug 'mtth/scratch.vim'
Plug 'junegunn/goyo.vim'
Plug 'vimwiki/vimwiki'

" coding
Plug 'editorconfig/editorconfig-vim'
Plug 'natebosch/vim-lsc'

" elixir
Plug 'elixir-editors/vim-elixir'

" javascript
Plug 'maxmellon/vim-jsx-pretty'
Plug 'leafgarland/typescript-vim', {'for': 'typescript'}

" other file types
Plug 'dart-lang/dart-vim-plugin'  " lazy loading only works after one open
Plug 'dag/vim-fish', {'for': 'fish'}
Plug 'jparise/vim-graphql'
Plug 'fladson/vim-kitty', {'for': 'kitty'}
Plug 'chr4/nginx.vim', {'for': 'nginx'}
Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}
Plug 'LaTeX-Box-Team/LaTeX-Box', {'for': 'tex'}
Plug 'cespare/vim-toml', {'for': 'toml'}

call plug#end()


" theme and ui

" .. gruvbox
colorscheme gruvbox

" .. airline
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_right_sep = ''


" should be built-in

" .. commentary
nmap  <leader>c    <plug>CommentaryLine
vmap  <leader>c    <plug>Commentary


" going places

" .. fzf.vim

" an ag counterpart of :RG — with the ag args from fzf#vim#ag_raw
command! -bang -nargs=* AG call fzf#vim#grep2("ag --nogroup --column --color --", <q-args>, fzf#vim#with_preview(), <bang>0)

" like the good old ack.vim
nnoremap  <leader>a		:AG 

" :Files lists all non-hidden files in the repo
" :GFiles uses git ls-files as source — with the args passed on
nnoremap  <c-p>			:GFiles --exclude-standard --cached --others<cr>


" drawers and extras

" .. gundo
let g:gundo_prefer_python3=1  " problems with transition to 3
let g:gundo_help=0  " disable help text

nnoremap  <leader>u 	:GundoToggle<cr>

" .. scratch
let g:scratch_autohide=1
let g:scratch_insert_autohide=0
let g:scratch_height=10
let g:scratch_top=1
let g:scratch_horizontal=1
let g:scratch_no_mappings=1

nmap  <leader>s		<plug>(scratch-insert-reuse)
xmap  <leader>s		<plug>(scratch-selection-reuse)

" .. goyo
let g:goyo_width=83

nnoremap  <leader>q		:Goyo<cr>

" .. vimwiki
let g:vimwiki_ext2syntax = {}
let g:vimwiki_list = [{'path': '~/.vimwiki/'}]


" development

" .. editorconfig
let g:EditorConfig_max_line_indicator = "exceeding"

" .. vim-lsc
let g:lsc_server_commands = {
	\ 'elixir': 'elixir-ls',
	\ 'javascript': 'typescript-language-server --stdio',
	\ 'javascriptreact': 'typescript-language-server --stdio',
	\ 'python': 'pylsp',
	\ 'typescript': 'typescript-language-server --stdio',
	\ 'typescriptreact': 'typescript-language-server --stdio',
	\ }

let g:lsc_auto_map = {
	\ 'GoToDefinition': ['gd', '<leader>d'],
	\ 'FindReferences': 'gr',
	\ 'ShowHover': v:true,
	\ 'Completion': 'completefunc',
	\ }


" other file types

" .. dart
let g:dart_style_guide = 2
let g:dart_format_on_save = 1

" .. latex
let g:LatexBox_Folding=1  " enable folding
let g:LatexBox_latexmk_options="-xelatex"
